package model;
// Generated 6 janv. 2016 11:04:49 by Hibernate Tools 4.3.1.Final

import java.io.IOException;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;


/**
 * Pret generated by hbm2java
 */
public class Pret extends Model implements java.io.Serializable {
	
	private int idPret;
	
	private Client client;
	
	private Utilisateur utilisateur;
	
	private TypePret typePret;
	
	private StatutPret statutPret;
	
	private Boolean tauxVariable;
	
	private Date dateCreation;
	
	private int nombreEcheance;
	
	private int intervalEcheance;
	
	private double montantEcheance;
	
	private Date dateFinPret;
	
	private double montant;
	
	public Pret() {
		this.primaryKey = "id_pret";
		this.tableName = "pret";
	}

	public Pret(int idPret, Client client, Utilisateur utilisateur, TypePret typePret, StatutPret statutPret,
			Boolean tauxVariable, Date dateCreation, int nombreEcheance, int intervalEcheance, double montantEcheance,
			Date dateFinPret, double montant) {
		this.idPret = idPret;
		this.client = client;
		this.utilisateur = utilisateur;
		this.typePret = typePret;
		this.statutPret = statutPret;
		this.tauxVariable = tauxVariable;
		this.dateCreation = dateCreation;
		this.nombreEcheance = nombreEcheance;
		this.intervalEcheance = intervalEcheance;
		this.montantEcheance = montantEcheance;
		this.dateFinPret = dateFinPret;
		this.montant = montant;
	}

	public Pret(int idPret, Client client, Utilisateur utilisateur) {
		this.idPret = idPret;
		this.client = client;
		this.utilisateur = utilisateur;
	}

	public Pret(int idPret, Client client, Utilisateur utilisateur, Boolean tauxVariable, Date dateCreation,
			StatutPret statutPret, TypePret typePret) {
		this.idPret = idPret;
		this.client = client;
		this.utilisateur = utilisateur;
		this.tauxVariable = tauxVariable;
		this.dateCreation = dateCreation;
		this.statutPret = statutPret;
		this.typePret = typePret;
	}
	
	
	
	@Override
	public int insert(Connection conn) {
		
		/* Insert SQL query */
		String sql = "INSERT INTO "+this.tableName
				+" (id_client, id_utilisateur, taux_variable, date_creation,id_type_pret,id_statut_pret, nombre_echeance, montant_echeance, montant_pret, interval_echeance, date_fin_pret) "
				+ "VALUES (?, ?, ?, ?,?,?,?,?,?,?,?)";
		
		System.out.println("Insertion du pret");
		
		PreparedStatement statement;
		try {
			
			statement = conn.prepareStatement(sql);
			
			/* catch the id_client and put it into the sql statement */
			statement.setString(1,"1");
			statement.setString(2,"1");
			
			/*if (this.getTauxVariable()) {
				statement.setString(3,"0");
			} else {
				statement.setString(3,"1");
			}*/
			statement.setString(3,"0");
			
			
			statement.setString(4,"1992/07/23");
			statement.setString(5,"1");
			statement.setString(6,"1");
			
			// nombre echeance 
			statement.setString(7,String.valueOf(this.nombreEcheance));
			// mensualite
			statement.setString(8,String.valueOf(this.montantEcheance));
			// montant
			statement.setString(9,String.valueOf(this.montant));
			
			statement.setString(10,"1");
			
			statement.setString(11,"2016-02-7");
			
			/* Execute the SQL query */
			int rowsInserted = statement.executeUpdate();
			
			/* Make sure number of inserted row > 0 */
			if (rowsInserted > 0) {
			    System.out.println("Pret inséré");
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	@Override
	public void get(Connection conn, int id) {
		Statement statement = null;
		ResultSet resultat= null;
		SimpleDateFormat formatter= new SimpleDateFormat("yyyy-mm-dd");
		
		Pret pret = null;
		
		try {
			statement = conn.createStatement();

	        /* Exécution d'une requète de lecture */
	        resultat = statement.executeQuery( "select * from pret WHERE id_pret = "+id);
	 
	        /* Récupération des données du résultat de la requète de lecture */
	        while (resultat.next()) {
	        	Date date_crea;
	        	Date date_fin;
				try {
					date_crea = formatter.parse(resultat.getString(7));
					date_fin = formatter.parse(resultat.getString(11));
					Boolean bool;
					if(resultat.getString(6).contains("0")) {
						bool=false;
					} else {
						bool=true;
					}
		        	// pret = new Pret(Integer.parseInt(resultat.getString(1)),database.getClient(Integer.parseInt(resultat.getString(2))),database.getUtilisateur(Integer.parseInt(resultat.getString(3))),database.getTypePret(Integer.parseInt(resultat.getString(4))),database.getStatutPret(Integer.parseInt(resultat.getString(5))),bool,date_crea,Integer.parseInt(resultat.getString(8)),Integer.parseInt(resultat.getString(9)),Double.parseDouble(resultat.getString(10)),date_fin,Double.parseDouble(resultat.getString(12)));
		        	
		        	this.setIdPret(Integer.parseInt(resultat.getString(1)));
		        	this.setMontant(Double.parseDouble(resultat.getString(12)));
		        	this.setNombreEcheance(Integer.parseInt(resultat.getString(8)));
		        	this.setMontantEcheance(Integer.parseInt(resultat.getString(9)));
				
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Override
	public int update(Connection conn) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int delete(Connection conn) {
		
		String sql = "DELETE FROM pret WHERE id_pret="+this.idPret;
		
		Statement statement;
		int rowsDeleted = 0;
		
		try {
			statement = conn.createStatement();
			rowsDeleted = statement.executeUpdate(sql);
			if (rowsDeleted > 0) {
			    System.out.println("Pret Supprimé");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rowsDeleted;	
	}

	@Override
	public String toXML() {
		String strXml = new String();
		strXml += "<pret>";
		strXml += "<id>"+this.getIdPret()+"</id>";
		strXml += "<montant>"+this.getMontant()+"</montant>";
		strXml += "<mensualite>"+this.getMontantEcheance()+"</mensualite>";
		strXml += "<nbmensualite>"+this.getNombreEcheance()+"</nbmensualite>";
		strXml += "</pret>";
		return strXml;
	}

	@Override
	public void parseXML(String xml) {
		/* Read the configuration file */
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

		try {
			DocumentBuilder db = dbf.newDocumentBuilder();

			try {
				//System.out.println(msg);
				InputSource is = new  InputSource(new StringReader(xml));
				Document doc = db.parse(is);

				NodeList dbList = doc.getElementsByTagName(this.tableName);

				for (int i = 0; i < dbList.getLength(); i++) {

					Node dbase = dbList.item(i);
					if (dbase.getNodeType() == Node.ELEMENT_NODE) {
						Element ele = (Element) dbase;
						
						this.setIdPret(Integer.parseInt(ele.getElementsByTagName("id").item(0).getTextContent()));
						
						this.setNombreEcheance(Integer.parseInt(ele.getElementsByTagName("nbmensualite").item(0).getTextContent()));
						
						this.setMontantEcheance(Double.parseDouble(ele.getElementsByTagName("mensualite").item(0).getTextContent()));
						
						this.setMontant(Double.parseDouble(ele.getElementsByTagName("montant").item(0).getTextContent()));
					} else {
						System.out.println("non");
					}
				}
			} catch (SAXException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
	}


	/**
	 * DEPRECATED
	 * 
	 * @param pret It's the pret that we want to add in our table
	 * @param conn conn is our connection
	 * @return
	 */
	public static int insertPret(Pret pret,java.sql.Connection conn)
	{
		String sql = "INSERT INTO PRET (id_client, id_utilisateur, taux_variable, date_creation,id_type_pret,id_statut_pret) "
				+ "VALUES (?, ?, ?, ?,?,?)";
		PreparedStatement statement;
		try {
			statement = conn.prepareStatement(sql);
			//catch the id_client and put it into the sql statement
			statement.setString(1,Integer.toString(pret.getClient().getIdClient()));
			statement.setString(2,Integer.toString(pret.getUtilisateur().getIdUtilisateur()));
			if(pret.getTauxVariable()) 	statement.setString(3,"0");
			else statement.setString(3,"1");
			statement.setString(4,"1992/07/23");
			statement.setString(5,Integer.toString(pret.getTypePret().getIdTypePret()));
			statement.setString(6,Integer.toString(pret.getStatutPret().getid_statut_pret()));
			int rowsInserted = statement.executeUpdate();
			if (rowsInserted > 0) {
				// confirm message
			    System.out.println("Pret inséré");
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}
	
	/**
	 * DEPRECATED
	 * 
	 * @param conn
	 * @param id
	 * @return
	 */
	public static int deletePret(Connection conn, int id)
	{
		String sql = "DELETE FROM pret WHERE id_pret="+id;
		Statement statement;
		int rowsDeleted = 0;
		try {
			statement = conn.createStatement();
			rowsDeleted = statement.executeUpdate(sql);
			if (rowsDeleted > 0) {
			    System.out.println("Pret Supprimé");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rowsDeleted;	
	}
	
	
	public static ArrayList<Pret> selectPret(Connection conn,ConnectionDB database){
		Statement statement = null;
		ResultSet resultat= null;
		SimpleDateFormat formatter= new SimpleDateFormat("yyyy-mm-dd");
		ArrayList<Pret> prets=new ArrayList<Pret>();
		try {
			statement = conn.createStatement();

	        /* Exécution d'une requète de lecture */
	        resultat = statement.executeQuery( "select * from pret" );
	 
	        /* Récupération des données du résultat de la requète de lecture */
	        while ( resultat.next() ) {
	        	Date date_crea;
	        	Date date_fin;
				try {
					date_crea = formatter.parse(resultat.getString(7));
					date_fin = formatter.parse(resultat.getString(11));
					Boolean bool;
					if(resultat.getString(6).contains("0"))bool=false;
					else bool=true;
		        	prets.add(new Pret(Integer.parseInt(resultat.getString(1)),database.getClient(Integer.parseInt(resultat.getString(2))),database.getUtilisateur(Integer.parseInt(resultat.getString(3))),database.getTypePret(Integer.parseInt(resultat.getString(4))),database.getStatutPret(Integer.parseInt(resultat.getString(5))),bool,date_crea,Integer.parseInt(resultat.getString(8)),Integer.parseInt(resultat.getString(9)),Double.parseDouble(resultat.getString(10)),date_fin,Double.parseDouble(resultat.getString(12))));
		        	System.out.println("Ajout d'un pret");
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
		return prets;
	}
	
	
	public static Pret get(Connection conn,ConnectionDB database, int id) {
		
		Statement statement = null;
		ResultSet resultat= null;
		SimpleDateFormat formatter= new SimpleDateFormat("yyyy-mm-dd");
		
		Pret pret = null;
		
		try {
			statement = conn.createStatement();

	        /* Exécution d'une requète de lecture */
	        resultat = statement.executeQuery( "select * from pret WHERE id_pret = "+id);
	 
	        /* Récupération des données du résultat de la requète de lecture */
	        while ( resultat.next() ) {
	        	Date date_crea;
	        	Date date_fin;
				try {
					date_crea = formatter.parse(resultat.getString(7));
					date_fin = formatter.parse(resultat.getString(11));
					Boolean bool;
					if(resultat.getString(6).contains("0"))bool=false;
					else bool=true;
		        	pret = new Pret(Integer.parseInt(resultat.getString(1)),database.getClient(Integer.parseInt(resultat.getString(2))),database.getUtilisateur(Integer.parseInt(resultat.getString(3))),database.getTypePret(Integer.parseInt(resultat.getString(4))),database.getStatutPret(Integer.parseInt(resultat.getString(5))),bool,date_crea,Integer.parseInt(resultat.getString(8)),Integer.parseInt(resultat.getString(9)),Double.parseDouble(resultat.getString(10)),date_fin,Double.parseDouble(resultat.getString(12)));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
		return pret;
	}
	

	@Override
	public String toString() {
		return idPret + " " + client.getIdClient() + " " + utilisateur.getIdUtilisateur() + " "
				+ typePret.getIdTypePret() + " " + statutPret.getid_statut_pret() + " " + tauxVariable + " "
				+ dateCreation + " " + nombreEcheance + " " + intervalEcheance
				+ " " + montantEcheance + " " + dateFinPret + " " + montant;
	}
	
	public int getIdPret() {
		return this.idPret;
	}

	public void setIdPret(int idPret) {
		this.idPret = idPret;
	}

	public Client getClient() {
		return this.client;
	}

	public void setClient(Client client) {
		this.client = client;
	}

	public Utilisateur getUtilisateur() {
		return this.utilisateur;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	public Boolean getTauxVariable() {
		return this.tauxVariable;
	}

	public void setTauxVariable(Boolean tauxVariable) {
		this.tauxVariable = tauxVariable;
	}

	public Date getDateCreation() {
		return this.dateCreation;
	}

	public void setDateCreation(Date dateCreation) {
		this.dateCreation = dateCreation;
	}

	public StatutPret getStatutPret() {
		return this.statutPret;
	}

	public void setStatutPret(StatutPret statutPret) {
		this.statutPret = statutPret;
	}

	public TypePret getTypePret() {
		return this.typePret;
	}

	public void setTypePret(TypePret typePret) {
		this.typePret = typePret;
	}
	
	public int getNombreEcheance() {
		return nombreEcheance;
	}

	public void setNombreEcheance(int nombreEcheance) {
		this.nombreEcheance = nombreEcheance;
	}

	public int getIntervalEcheance() {
		return intervalEcheance;
	}

	public void setIntervalEcheance(int intervalEcheance) {
		this.intervalEcheance = intervalEcheance;
	}

	public double getMontantEcheance() {
		return montantEcheance;
	}

	public void setMontantEcheance(double montantEcheance) {
		this.montantEcheance = montantEcheance;
	}

	public Date getDateFinPret() {
		return dateFinPret;
	}

	public void setDateFinPret(Date dateFinPret) {
		this.dateFinPret = dateFinPret;
	}

	public double getMontant() {
		return montant;
	}

	public void setMontant(double montant) {
		this.montant = montant;
	}

	

}
